/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package at.ac.fhcampuswien
import java.util.Scanner
class App {
    // Game logic for a number guessing game
    fun playNumberGame(digitsToGuess: Int = 4) {
        //TODO: build a menu which calls the functions and works with the return values
        val generatedNumber = generateRandomNonRepeatingNumber(digitsToGuess)
        while (true) {
            val myScan = Scanner(System.`in`)
            val userInput = myScan.nextLine().trim().toInt()
            val solution = checkUserInputAgainstGeneratedNumber(userInput, generatedNumber)
            println(solution)
            if (solution.n == digitsToGuess && solution.m == digitsToGuess) {
                println("User wins!")
                break
            }
        }
    }

    /**
     * Generates a non-repeating number of a specified length between 1-9.
     *
     * Note: The function is designed to generate a number where each digit is unique and does not repeat.
     * It is important to ensure that the length parameter does not exceed the maximum possible length
     * for non-repeating digits (which is 9 excluding 0 for base-10 numbers).
     *
     * @param length The length of the non-repeating number to be generated.
     *               This dictates how many digits the generated number will have.
     * @return An integer of generated non-repeating number.
     *         The generated number will have a number of digits equal to the specified length and will
     *         contain unique, non-repeating digits.
     * @throws IllegalArgumentException if the length is more than 9 or less than 1.
     */
    val generateRandomNonRepeatingNumber: (Int) -> Int = { length ->
        //TODO implement the function
        if (length < 1 || length > 9) {
            throw IllegalArgumentException("Invalid length of number to be guessed!")
        }

        val list = mutableListOf(1, 2, 3, 4, 5, 6, 7, 8, 9)
        list.shuffle()
        var number = 0
        for (i in 0 until length) {
            number += list[i] * Math.pow(10.0, i.toDouble()).toInt()
        }

        number
    }

    /**
     * Compares the user's input integer against a generated number for a guessing game.
     * This function evaluates how many digits the user guessed correctly and how many of those
     * are in the correct position. The game generates number with non-repeating digits.
     *
     * Note: The input and the generated number must both be numbers.
     * If the inputs do not meet these criteria, an IllegalArgumentException is thrown.
     *
     * @param input The user's input integer. It should be a number with non-repeating digits.
     * @param generatedNumber The generated number with non-repeating digits to compare against.
     * @return [CompareResult] with two properties:
     *         1. `n`: The number of digits guessed correctly (regardless of their position).
     *         2. `m`: The number of digits guessed correctly and in the correct position.
     *         The result is formatted as "Output: m:n", where "m" and "n" represent the above values, respectively.
     * @throws IllegalArgumentException if the inputs do not have the same number of digits.
     */
    val checkUserInputAgainstGeneratedNumber: (Int, Int) -> CompareResult = { input, generatedNumber ->
        //TODO implement the function
        if (!(input is Int) ||!(generatedNumber is Int) || input.toString().length != generatedNumber.toString().length) {  // both parameters must be integers of the same length
            throw IllegalArgumentException("Invalid input! Must be a number with non-repeating digits and as long as the generated number!")
        }

        var guessedCorrectly = 0
        var guessedCorrectPosition = 0
        var inputCopy = input
        var generatedCopy = generatedNumber
        val myList = mutableListOf<Int>()       // empty list of integers making up generatedNumber
        for (char in generatedCopy.toString()) {
            myList.add(char.code - '0'.code)    // filling up list of integers
        }

        while (inputCopy != 0) {
            val inputDigit = Math.floorMod(inputCopy,  10)          // the last digit of the current copy value of the input parameter
            val generatedDigit = Math.floorMod(generatedCopy, 10)   // the last digit of the current copy value of the generatedNumber parameter
            if (inputDigit == generatedDigit) {                     // the positions of the digits have to match exactly here
                guessedCorrectPosition++
            }

            if (inputDigit in myList) {
                guessedCorrectly++
                myList.remove(inputDigit)                           // in case the input's last digit "just exists" without matching with the generatedNumber's position,
            }                                                       // this digit will be removed from the "reference array" of integers which make up generatedNumber

            inputCopy = Math.floorDiv(inputCopy, 10)
            generatedCopy = Math.floorDiv(generatedCopy, 10)
        }                                                           // preparation of the relevant variables for the next iteration

        CompareResult(guessedCorrectly, guessedCorrectPosition)
    }
}

fun main() {
    println("Hello World!")
    // TODO: call the App.playNumberGame function with and without default arguments
    val myGame = App()
    myGame.playNumberGame(5)
    myGame.playNumberGame()
}
